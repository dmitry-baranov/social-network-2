/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)
 * (7.13.0). https://openapi-generator.tech Do not edit the class manually.
 */
package com.dmitrii.socialnetwork.controller.api;

import com.dmitrii.socialnetwork.controller.model.LoginPost500Response;
import com.dmitrii.socialnetwork.controller.model.UserDto;
import com.dmitrii.socialnetwork.controller.model.UserRegisterPost200Response;
import com.dmitrii.socialnetwork.controller.model.UserRegisterPostRequest;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.security.SecurityRequirements;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;

@Validated
@Tag(name = "user", description = "the user API")
public interface UserApi {

  default Optional<NativeWebRequest> getRequest() {
    return Optional.empty();
  }

  /**
   * GET /user/get/{id}
   * Получение анкеты пользователя
   *
   * @param id Идентификатор пользователя (required)
   * @return Успешное получение анкеты пользователя (status code 200)
   * or Невалидные данные (status code 400)
   * or Анкета не найдена (status code 404)
   * or Ошибка сервера (status code 500)
   * or Ошибка сервера (status code 503)
   */
  @Operation(
      operationId = "userGetIdGet",
      description = "Получение анкеты пользователя",
      responses = {
          @ApiResponse(responseCode = "200", description = "Успешное получение анкеты пользователя", content = {
              @Content(mediaType = "application/json", schema = @Schema(implementation = UserDto.class))
          }),
          @ApiResponse(responseCode = "400", description = "Невалидные данные"),
          @ApiResponse(responseCode = "404", description = "Анкета не найдена"),
          @ApiResponse(responseCode = "500", description = "Ошибка сервера", content = {
              @Content(mediaType = "application/json", schema = @Schema(implementation = LoginPost500Response.class))
          }),
          @ApiResponse(responseCode = "503", description = "Ошибка сервера", content = {
              @Content(mediaType = "application/json", schema = @Schema(implementation = LoginPost500Response.class))
          })
      },
      security = {
          @SecurityRequirement(name = "bearerAuth")
      }
  )
  @SecurityRequirement(name = "BearerAuth")
  @RequestMapping(
      method = RequestMethod.GET,
      value = "/user/get/id/{id}",
      produces = {"application/json"}
  )

  ResponseEntity<UserDto> getUserById(
      @Parameter(name = "id", description = "Идентификатор пользователя", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
  );

  /**
   * GET /user/get/{username} Получение анкеты пользователя
   *
   * @param username Идентификатор пользователя (required)
   * @return Успешное получение анкеты пользователя (status code 200) or Невалидные данные (status
   * code 400) or Анкета не найдена (status code 404) or Ошибка сервера (status code 500) or Ошибка
   * сервера (status code 503)
   */
  @Operation(
      operationId = "userGetUsernameGet",
      description = "Получение анкеты пользователя",
      responses = {
          @ApiResponse(responseCode = "200", description = "Успешное получение анкеты пользователя", content = {
              @Content(mediaType = "application/json", schema = @Schema(implementation = UserDto.class))
          }),
          @ApiResponse(responseCode = "400", description = "Невалидные данные"),
          @ApiResponse(responseCode = "404", description = "Анкета не найдена"),
          @ApiResponse(responseCode = "500", description = "Ошибка сервера", content = {
              @Content(mediaType = "application/json", schema = @Schema(implementation = LoginPost500Response.class))
          }),
          @ApiResponse(responseCode = "503", description = "Ошибка сервера", content = {
              @Content(mediaType = "application/json", schema = @Schema(implementation = LoginPost500Response.class))
          })
      },
      security = {
          @SecurityRequirement(name = "bearerAuth")
      }
  )
  @SecurityRequirement(name = "BearerAuth")
  @RequestMapping(
      method = RequestMethod.GET,
      value = "/user/get/username/{username}",
      produces = {"application/json"}
  )

  ResponseEntity<UserDto> getUserByUsername(
      @Parameter(name = "username", description = "Имя пользователя", required = true, in = ParameterIn.PATH) @PathVariable("username") String username
  );


  /**
   * POST /user/register
   * Регистрация нового пользователя
   *
   * @param userRegisterPostRequest (optional)
   * @return Успешная регистрация (status code 200)
   * or Невалидные данные (status code 400)
   * or Ошибка сервера (status code 500)
   * or Ошибка сервера (status code 503)
   */
  @Operation(
      operationId = "userRegisterPost",
      description = "Регистрация нового пользователя",
      responses = {
          @ApiResponse(responseCode = "200", description = "Успешная регистрация", content = {
              @Content(mediaType = "application/json", schema = @Schema(implementation = UserRegisterPost200Response.class))
          }),
          @ApiResponse(responseCode = "400", description = "Невалидные данные"),
          @ApiResponse(responseCode = "500", description = "Ошибка сервера", content = {
              @Content(mediaType = "application/json", schema = @Schema(implementation = LoginPost500Response.class))
          }),
          @ApiResponse(responseCode = "503", description = "Ошибка сервера", content = {
              @Content(mediaType = "application/json", schema = @Schema(implementation = LoginPost500Response.class))
          })
      }
  )
  @RequestMapping(
      method = RequestMethod.POST,
      value = "/user/register",
      produces = {"application/json"},
      consumes = {"application/json"}
  )

  ResponseEntity<UserRegisterPost200Response> register(
      @Parameter(name = "UserRegisterPostRequest", description = "") @Valid @RequestBody(required = false) UserRegisterPostRequest userRegisterPostRequest
  );


  /**
   * GET /user/search
   * Поиск анкет
   *
   * @param firstName Условие поиска по имени (required)
   * @param lastName  Условие поиска по фамилии (required)
   * @return Успешные поиск пользователя (status code 200)
   * or Невалидные данные (status code 400)
   * or Ошибка сервера (status code 500)
   * or Ошибка сервера (status code 503)
   */
  @Operation(
      operationId = "userSearchGet",
      description = "Поиск анкет",
      responses = {
          @ApiResponse(responseCode = "200", description = "Успешные поиск пользователя", content = {
              @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserDto.class)))
          }),
          @ApiResponse(responseCode = "400", description = "Невалидные данные"),
          @ApiResponse(responseCode = "500", description = "Ошибка сервера", content = {
              @Content(mediaType = "application/json", schema = @Schema(implementation = LoginPost500Response.class))
          }),
          @ApiResponse(responseCode = "503", description = "Ошибка сервера", content = {
              @Content(mediaType = "application/json", schema = @Schema(implementation = LoginPost500Response.class))
          })
      },
      security = {
          @SecurityRequirement(name = "bearerAuth")
      }
  )
  @SecurityRequirement(name = "BearerAuth")
  @RequestMapping(
      method = RequestMethod.GET,
      value = "/user/search",
      produces = {"application/json"}
  )

  ResponseEntity<List<UserDto>> searchUser(
      @NotNull @Parameter(name = "first_name", description = "Условие поиска по имени", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "first_name", required = true) String firstName,
      @NotNull @Parameter(name = "last_name", description = "Условие поиска по фамилии", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "last_name", required = true) String lastName
  );

}
